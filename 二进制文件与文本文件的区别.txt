一、文本文件和二进制文件的定义

　　计算机上所有文件存储在存储设备上都是二进制的,所以文本文件和二进制文件的区别并不是物理上的,而是逻辑上的！简单来说,文本文件是基于字符编码的文件, 常见的编码有ASCII编码和UNICODE编码等,二进制是基于值编码的文件,可以根据具体应用指定某个值是什么意思.

　　从以上可以看出文本文件基本上是定长编码的,基于字符,每个字符在具体编码中所占位数是固定的, 比如ASCII是8个比特的编码, UNICODE一般占16个比特.而二进制文件可以看成是变长编码的,因为是值编码,多少个比特代表一个值完全由你决定,大家对BMP文件比较熟悉,就拿它举例子吧,其头部是固定长度的14字节的文件头, 然后是40个字节的位图信息头.大家可以看出来了吧, 其编码是基于值的(不定长的, 2、4、8字节长的值都有), 所以BMP是二进制文件.

 

二、文本文件和二进制文件的存取

　　用文本工具打开文件的过程如下,拿记事本来说,首先读取文件屋里上所对应的的二进制比特流(在实际存储中为二进制的),然后按照你的解码方式来解释这个流, 将结果显示出来.比如你所选解码方式为ASCII(每个字符8比特),接下来,8个比特8个比特的去解释这个文件流,例如"01000000_01000001_10000010_01000011"(下划线是为增加可读性而加, 实际中没有),第一个8比特"01000000"按ASCII码来解码的话对应字符"A",同理其他3个8比特分别解码为"BCD",即这个文件流可以解释为"ABCD", 然后记事本就将这个"ABCD"显示在屏幕上.

　　但是用记事本打开二进制文件, 会用既定的字符编码工作(如ASCII码),所以当它打开二进制文件时, 出现乱码是很必然了！解码和译码不对嘛！比如文件流"00000000_00000000_00000000_00000001"可能在二进制文件中对应的是一个四字节的整数int 1, 在记事本里解释就变成了"NULL_NULL_NULL_SOH"这四个控制字符

　　也就是不管二进制文件还是文本文件,在存储时都是一连串的0和1,但是打开方式不同, 这些0和1的处理就不同, 如果按文本方式打开,打开的时候就会进行translate, 将每个字节转换成对应编码(ASCII、UNICODE等),而以二进制方式打开的话则不会进行任何translate,在编辑的时候文本最小单位为字节, 而二进制文件最小单位则是位！

 

三、文本文件和二进制文件的优缺点

　　文本文件编码基于字符定长, 译码容易

　　二进制文件编码变长, 所以灵活, 存储利用率要高, 译码难

 

四、C语言中文本读写和二进制读写

　　在WINDOWS操作系统上,C语言的文本读写和二进制读写的差别仅仅体现在回车换行符的处理上

　　文本方式写时, 每遇到一个"\n"(0AH换行符), 它将其转换成"\r\n"(0D0AH,回车换行),然后再写入文件,当文本文件读取时,它遇到一个"\r\n"将其反转换成"\n", 然后送到读缓冲区

　　二进制读写时不存在任何转换, 直接将写缓冲区中数据写入文件

 

　　总的来说,从编程角度来说,C语言中文本或二进制读写都是缓冲区与文件中二进制流的交互, 只是文本读写时有translate和回车换行的转换,所以当写缓冲区中无换行符时文本写和二进制写的结果是一样的,同理,当文件中不存在换行符时,文本读和二进制读的结果一样